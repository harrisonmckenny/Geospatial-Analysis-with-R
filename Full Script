#Spatial Data with R: Datacamp Lessons
#Harrison McKenny
#February 25th 2020

#install.packages("ggmap")
#install.packages("bitops")
#install.packages("rjson")

#-----------------Introduction to spatial data visualization in R------------------------

#1
library(ggmap)
corvallis <- c(lon = -123.2620, lat = 44.5646)

# Get map at zoom level 5: map_5
map_5 <- get_map(corvallis, zoom = 5, scale = 1)

# Plot map at zoom level 5
ggmap(map_5)

# Get map at zoom level 13: corvallis_map
corvallis_map <- get_map(corvallis,zoom = 13, scale = 1)

# Plot map at zoom level 13
ggmap(corvallis_map)


#2
# Look at head() of sales
head(sales)

# Swap out call to ggplot() with call to ggmap()
ggmap(corvallis_map) +
  geom_point(aes(lon, lat), data = sales)


#3

# Map color to year_built 
ggmap(corvallis_map) +
  geom_point(aes(lon, lat,color=year_built), data = sales)

# Map color to number of bedrooms
ggmap(corvallis_map) +
  geom_point(aes(lon, lat,size=bedrooms), data = sales)

# Map color to price / finished_squarefeet
ggmap(corvallis_map) +
  geom_point(aes(lon, lat,
                 color=price/finished_squarefeet), data = sales)

#4
corvallis <- c(lon = -123.2620, lat = 44.5646)

# Add a maptype argument to get a satellite map
corvallis_map_sat <- get_map(corvallis, zoom = 13, maptype='satellite')


# Edit to display satellite map
ggmap(corvallis_map_sat) +
  geom_point(aes(lon, lat, color = year_built), data = sales)

#5
corvallis <- c(lon = -123.2620, lat = 44.5646)

# Add source and maptype to get toner map from Stamen Maps
corvallis_map_bw <- get_map(corvallis, zoom = 13,source="stamen",maptype="toner")

# Edit to display toner map
ggmap(corvallis_map_bw) +
  geom_point(aes(lon, lat, color = year_built), data = sales)


#6
# Use base_layer argument to ggmap() to specify data and x, y mappings
ggmap(corvallis_map_bw,
      base_layer=ggplot(sales, aes(lon, lat))) +
  geom_point(aes(color = year_built))

# Use base_layer argument to ggmap() and add facet_wrap()
ggmap(corvallis_map_bw,
      base_layer=ggplot(sales, aes(lon, lat))) +
  geom_point(aes(color = class))+
  facet_wrap(~class)


#7
qmplot(lon, lat, data = sales, 
       geom = "point", color = class) +
  facet_wrap(~ class)

#8
# Add a point layer with color mapped to ward
ggplot(ward_sales, aes(lon, lat))+
  geom_point(aes(color=ward))

# Add a point layer with color mapped to group
ggplot(ward_sales, aes(lon, lat))+
  geom_point(aes(color=group))

# Add a path layer with group mapped to group
ggplot(ward_sales, aes(lon, lat))+
  geom_path(aes(group=group))

# Add a polygon layer with fill mapped to ward, and group to group
ggplot(ward_sales, aes(lon, lat))+
  geom_polygon(aes(fill=ward,group=group))

#9

# Fix the polygon cropping
ggmap(corvallis_map_bw, 
      base_layer = ggplot(ward_sales, aes(lon, lat)),extent="normal",maprange=FALSE) +
  geom_polygon(aes(group = group, fill = ward))

# Repeat, but map fill to num_sales
ggmap(corvallis_map_bw, 
      base_layer = ggplot(ward_sales, aes(lon, lat)),
      extent = "normal", maprange = FALSE) +
  geom_polygon(aes(group = group, fill = num_sales))
               
# Repeat again, but map fill to avg_price
ggmap(corvallis_map_bw, 
      base_layer = ggplot(ward_sales, aes(lon, lat)),
      extent = "normal", maprange = FALSE) +
  geom_polygon(aes(group = group, fill = avg_price),alpha=0.8)

#an alternative to all this is to use qmplot like this:
qmplot(lon, lat, data = ward_sales, geom = "polygon", group = group, fill = avg_price)


#10
ggplot(preds, aes(lon, lat))+
  geom_points()

# Add a tile layer with fill mapped to predicted_price
ggplot(preds, aes(lon, lat))+
  geom_tile(aes(fill=predicted_price))

# Use ggmap() instead of ggplot()
ggmap(corvallis_map_bw) +
  geom_tile(aes(lon, lat, fill = predicted_price), 
            data = preds, alpha = 0.8)

#------------------------------Introducting SP objects-----------------------------

install.packages("sp")
library(sp)
library(sp)

#1

# Print countries_sp
print(countries_sp)

# Call summary() on countries_sp
summary(countries_sp)

# Call plot() on countries_sp
plot(countries_sp)

#2

# Call str() on countries_sp NOT HELPFUL!!!!!!!!!!!!!!!!!!!!!
str(countries_sp)

# Call str() on countries_sp with max.level = 2 HELPFUL!!!!!!!!!!!!!!!!!!!!!
str(countries_sp,max.level=2)

#3 Spatial polygon and spatial dataframe objects

# Call summary() on countries_spdf and countries_sp
summary(countries_sp)
summary(countries_spdf)

# Call str() with max.level = 2 on countries_spdf
str(countries_spdf,max.level=2)

# Plot countries_spdf
plot(countries_spdf)

#4
# 169th element of countries_spdf@polygons: one
one = countries_spdf@polygons[[169]]

# Print one
print(one)

# Call summary() on one
summary(one)

# Call str() on one with max.level = 2
str(one,max.level=2)

#5

one <- countries_spdf@polygons[[169]]

# str() with max.level = 2, on the Polygons slot of one
str(one@Polygons,max.level=2)

# str() with max.level = 2, on the 6th element of the one@Polygons
str(one@Polygons[[6]],max.level=2)

# Call plot on the coords slot of 6th element of one@Polygons
plot(one@Polygons[[6]]@coords)

#6
# Subset the 169th object of countries_spdf: usa
usa<-countries_spdf[169,]

# Look at summary() of usa
summary(usa)

# Look at str() of usa
str(usa,max.level=2)

# Call plot() on usa
plot(usa)

#7
# Call head() and str() on the data slot of countries_spdf
head(countries_spdf@data)

str(countries_spdf@data)


# Pull out the name column using $
countries_spdf$name

# Pull out the subregion column using [[
countries_spdf[['subregion']]

#8
# Create logical vector: is_nz
is_nz <-countries_spdf$name=='New Zealand'

# Subset countries_spdf using is_nz: nz
nz<-countries_spdf[is_nz,]

# Plot nz
plot(nz)

#9
install.packages("tmap")

library(sp)
library(tmap)

# Use qtm() to create a choropleth map of gdp
library(tmap)
qtm(shp = countries_spdf, fill = "gdp")

#10
# Add style argument to the tm_fill() call
tm_shape(countries_spdf) +
  tm_fill(col = "population",style="quantile") +
  # Add a tm_borders() layer 
  tm_borders(col="burlywood4")

# New plot, with tm_bubbles() instead of tm_fill()
tm_shape(countries_spdf) +
  tm_bubbles(size = "population")+
  # Add a tm_borders() layer 
  tm_borders(col="burlywood4")

#11
library(sp)
library(tmap)

# Switch to a Hoboâ€“Dyer projection
tm_shape(countries_spdf,projection='hd') +
  tm_grid(n.x = 11, n.y = 11) +
  tm_fill(col = "population", style = "quantile")  +
  tm_borders(col = "burlywood4") 

# Switch to a Robinson projection
tm_shape(countries_spdf,projection="robin") +
  tm_grid(n.x = 11, n.y = 11) +
  tm_fill(col = "population", style = "quantile")  +
  tm_borders(col = "burlywood4") 

# Add tm_style("classic") to your plot
tm_shape(countries_spdf,projection="robin") +
  tm_grid(n.x = 11, n.y = 11) +
  tm_fill(col = "population", style = "quantile")  +
  tm_borders(col = "burlywood4")+tm_style("classic") 

#12
library(sp)
library(tmap)

# Plot from last exercise
g<- tm_shape(countries_spdf) +
  tm_grid(n.x = 11, n.y = 11, projection = "longlat") +
  tm_fill(col = "population", style = "quantile")  +
  tm_borders(col = "burlywood4")

# Save a static version "population.png"
tmap_save(g,"population.png")

# Save an interactive version "population.html"
tmap_save(g,"population.html")


#----------------------------------The Raster Package------------------------------------
#install.packages("raster")
library(raster)

#1
library(raster)

# Print pop
pop

# Call str() on pop, with max.level = 2
str(pop,max.level=2)

# Call summary on pop
summary(pop)

#2
# Call plot() on pop
plot(pop)

# Call str() on values(pop)
str(values(pop))

# Call head() on values(pop)
head(values(pop))

#3
# Print pop_by_age
pop_by_age

# Subset out the under_1 layer using [[
pop_by_age[["under_1"]]

# Plot the under_1 layer
plot(pop_by_age[["under_1"]])

#4
library(tmap)

# Specify pop as the shp and add a tm_raster() layer
tm_shape(shp=pop) +
  tm_raster()

# Plot the under_1 layer in pop_by_age
tm_shape(pop_by_age)+
  tm_raster(col="under_1")


library(rasterVis)
# Call levelplot() on pop
levelplot(pop)

#5

#install.packages("RColorBrewer")
#install.packages("rasterVis")
library(rasterVis)
library(RColorBrewer)
# 9 steps on the RColorBrewer "BuPu" palette: blups
blups<-brewer.pal(n=9,"BuPu")

# Add scale_fill_gradientn() with the blups palette
ggplot(preds) +
  geom_tile(aes(lon, lat, fill = predicted_price), alpha = 0.8)+
  scale_fill_gradientn(colors=blups)

#6
library(viridisLite)
# viridisLite viridis palette with 9 steps: vir
vir<-viridis(n=9)

# Add scale_fill_gradientn() with the vir palette
ggplot(preds) +
  geom_tile(aes(lon, lat, fill = predicted_price), alpha = 0.8)+
  scale_fill_gradientn(colors=vir)

library(viridisLite)
# mag: a viridisLite magma palette with 9 steps
mag<-magma(n=9)

# Add scale_fill_gradientn() with the mag palette
ggplot(preds) +
  geom_tile(aes(lon, lat, fill = predicted_price), alpha = 0.8)+
  scale_fill_gradientn(colors=mag)

#7
# Generate palettes from last time
library(RColorBrewer)
blups <- brewer.pal(9, "BuPu")

library(viridisLite)
vir <- viridis(9)
mag <- magma(9)

# Use the blups palette
tm_shape(prop_by_age) +
  tm_raster("age_18_24",palette=blups) +
  tm_legend(position = c("right", "bottom"))

# Use the vir palette
tm_shape(prop_by_age) +
  tm_raster("age_18_24",palette=vir) +
  tm_legend(position = c("right", "bottom"))

# Use the mag palette but reverse the order
tm_shape(prop_by_age) +
  tm_raster("age_18_24",palette=mag) +
  tm_legend(position = c("right", "bottom"))

#8
mag <- viridisLite::magma(7)

library(classInt)

# Create 5 "pretty" breaks with classIntervals()
classIntervals(values(prop_by_age[["age_18_24"]]),n=5,style="pretty")


# Create 5 "quantile" breaks with classIntervals()
classIntervals(values(prop_by_age[["age_18_24"]]),n=5,style="quantile")


# Use 5 "quantile" breaks in tm_raster()
tm_shape(prop_by_age) +
  tm_raster("age_18_24", palette = mag,n=5,style="quantile") +
  tm_legend(position = c("right", "bottom"))

# Create histogram of proportions
hist(values(prop_by_age[["age_18_24"]]))

# Use fixed breaks in tm_raster()
g<-tm_shape(prop_by_age) +
  tm_raster("age_18_24", palette = mag,
            style = "fixed",breaks=c(0.025, 0.05, 0.1, 0.2, 0.25, 0.3, 1))

# Save your plot to "prop_18-24.html"
tmap_save(g,"prop_18-24.html")

#9
# Print migration
migration

# Diverging "RdGy" palette
red_gray <- brewer.pal(n=7,"RdGy")

# Use red_gray as the palette 
tm_shape(migration) +
  tm_raster(palette=red_gray) +
  tm_legend(outside = TRUE, outside.position = c("bottom"))

# Add fixed breaks 
tm_shape(migration) +
  tm_raster(palette=red_gray,style="fixed",breaks=c(-5e6, -5e3, -5e2, -5e1, 5e1, 5e2, 5e3, 5e6)) +
  tm_legend(outside = TRUE, outside.position = c("bottom"))


#10
library(raster)

# Plot land_cover
tm_shape(land_cover)+
  tm_raster()


# Palette like the ggplot2 default
hcl_cols <- hcl(h = seq(15, 375, length = 9), 
                c = 100, l = 65)[-9]

# Use hcl_cols as the palette
tm_shape(land_cover)+
  tm_raster(palette=hcl_cols)


# Examine levels of land_cover
levels(land_cover)

# A set of intuitive colors
intuitive_cols <- c(
  "darkgreen",
  "darkolivegreen4",
  "goldenrod2",
  "seagreen",
  "wheat",
  "slategrey",
  "white",
  "lightskyblue1"
)

# Use intuitive_cols as palette
tm_shape(land_cover)+
  tm_raster(palette=intuitive_cols)+
  tm_legend(position=c("left","bottom"))


#--------------------------Geospatial Data Import and Projections
install.packages("rgdal")
library(rgdal)
#1
library(sp)
library(rgdal)

# Use dir() to find directory name
dir()

# Call dir() with directory name
dir("nynta_16c")

# Read in shapefile with readOGR(): neighborhoods
neighborhoods<-readOGR(dsn="nynta_16c",layer="nynta")

# summary() of neighborhoods
summary(neighborhoods)

# Plot neighborhoods
plot(neighborhoods)

#2
library(raster) 

# Call dir()
dir()

# Call dir() on the directory
dir("nyc_grid_data")

# Use raster() with file path: income_grid
income_grid<-raster("nyc_grid_data/m5602ahhi00.tif")

# Call summary() on income_grid
summary(income_grid)

# Call plot() on income_grid
plot(income_grid)

#3
#install.packages("tigris")

library(sp)
library(tigris)

# Call tracts(): nyc_tracts
nyc_tracts<-tracts(state="NY",county="New York",cb=TRUE)

# Call summary() on nyc_tracts
summary(nyc_tracts)

# Plot nyc_tracts
plot(nyc_tracts)

#4
library(sp)

# proj4string() on nyc_tracts and neighborhoods
proj4string(neighborhoods)

proj4string(nyc_tracts)


# coordinates() on nyc_tracts and neighborhoods

head(coordinates(neighborhoods))

head(coordinates(nyc_tracts))
# plot() neighborhoods and nyc_tracts
plot(neighborhoods)

plot(nyc_tracts,col='red',add=TRUE)

#4
library(sp)
library(raster)

# Use spTransform on neighborhoods: neighborhoods
spTransform(neighborhoods,proj4string(nyc_tracts))


# head() on coordinates() of neighborhoods
head(coordinates(neighborhoods))

# Plot neighborhoods, nyc_tracts and water
plot(neighborhoods)
plot(nyc_tracts,add=TRUE,col="red")
plot(water,add=TRUE,col="blue")

#5
library(sp)

# Use str() on nyc_income 
str(nyc_income)

# ...and on nyc_tracts@data
str(nyc_tracts@data)

#6
# Highlight tract 002201 in nyc_tracts
plot(nyc_tracts)
plot(nyc_tracts[nyc_tracts$TRACTCE == "002201", ], 
     col = "red", add = TRUE)

# Set nyc_tracts@data to nyc_income
nyc_tracts@data <- nyc_income

# Highlight tract 002201 again
plot(nyc_tracts)
plot(nyc_tracts[nyc_tracts$tract == "002201", ], 
     col = "red", add = TRUE)

#7 *******************************************************************IMPORTANT************************************************
# Check for duplicates in nyc_income
any(duplicated(nyc_income$tract))

# Check for duplicates in nyc_tracts
any(duplicated(nyc_tracts$TRACTCE))

# Check nyc_tracts in nyc_income
all(nyc_tracts$TRACTCE %in% nyc_income$tract)

# Check nyc_income in nyc_tracts
all(nyc_income$tract %in% nyc_tracts$TRACTCE)

#8-----------------------Merging with merge from SP
library(sp)
library(tmap)

# Merge nyc_tracts and nyc_income: nyc_tracts_merge
nyc_tracts_merge<-merge(nyc_tracts,nyc_income,by.x="TRACTCE",by.y="tract")

# Call summary() on nyc_tracts_merge
summary(nyc_tracts_merge)

# Choropleth with col mapped to estimate
tm_shape(nyc_tracts_merge)+
  tm_fill(col="estimate")

#9
library(tmap)

tm_shape(nyc_tracts_merge) +
  tm_fill(col = "estimate") +
  # Add a water layer, tm_fill() with col = "grey90"
  tm_shape(water)             +
  tm_fill(col="grey90")              +
  # Add a neighborhood layer, tm_borders()
  tm_shape(neighborhoods) +
  tm_borders()

#10
library(tmap)

# Find unique() nyc_tracts_merge$COUNTYFP
unique(nyc_tracts_merge$COUNTYFP)

# Add logical expression to pull out New York County
manhat_hoods <- neighborhoods[neighborhoods$CountyFIPS=="061", ]

tm_shape(nyc_tracts_merge) +
  tm_fill(col = "estimate") +
  tm_shape(water) +
  tm_fill(col = "grey90") +
  # Edit to use manhat_hoods instead
  tm_shape(manhat_hoods) +
  tm_borders() +
  # Add a tm_text() layer
  tm_text(text="NTAName") 

#11
library(tmap)

tm_shape(nyc_tracts_merge) +
  # Add title and change palette
  tm_fill(col = "estimate", 
          title = "Median Income",
          palette = "Greens") +
  # Add tm_borders()
  tm_borders(col="grey60",lwd=0.5) +
  tm_shape(water) +
  tm_fill(col = "grey90") +
  tm_shape(manhat_hoods) +
  # Change col and lwd of neighborhood boundaries
  tm_borders(col="grey40",lwd=2) +
  tm_text(text = "name", size = 0.5) +
  # Add tm_credits()
  tm_credits("Source: ACS 2014 5-year Estimates, \n accessed via acs package",position=c("right","bottom"))
             
             
 # Save map as "nyc_income_map.png"
 tmap_save(filename = "nyc_income_map.png",width=4,height=7)
             
